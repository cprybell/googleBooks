{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cpryb\\\\Documents\\\\UW Coding Bootcamp\\\\Course Work\\\\HW17\\\\googleBooks\\\\client\\\\src\\\\pages\\\\BookSearch.js\";\nimport React, { Component } from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport BookCard from \"../components/BookCard\";\n\nclass Books extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      books: [],\n      title: ''\n    };\n\n    this.loadBooks = () => {\n      API.getBooks().then(res => this.setState({\n        books: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.handleInputChange = event => {\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleFormSubmit = event => {\n      event.preventDefault();\n\n      if (this.state.title) {\n        API.searchBook(this.state.title).then(res => this.setState({\n          books: res.data.items\n        })).catch(err => console.log(err));\n      }\n    };\n\n    this.handleSave = book => {\n      let data = {\n        title: book.volumeInfo.title,\n        author: book.volumeInfo.authors[0],\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks.medium,\n        link: book.volumeInfo.canonicalVolumeLink\n      };\n      API.saveBook();\n    };\n  }\n\n  componentDidMount() {\n    this.loadBooks();\n  }\n\n  render() {\n    return React.createElement(Container, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Google Book Search!\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Search by book titles using the search bar below.\")), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Input, {\n      name: \"title\",\n      placeholder: \"Book Title (ex. The Shining)\",\n      value: this.state.title,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(FormBtn, {\n      onClick: this.handleFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Search Book\"))), React.createElement(Col, {\n      size: \"md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Books Found\")), this.state.books.length ? this.state.books.map(book => React.createElement(BookCard, {\n      key: book.Id,\n      title: book.volumeInfo.title,\n      author: book.volumeInfo.authors[0],\n      synopsis: book.volumeInfo.description,\n      link: book.volumeInfo.canonicalVolumeLink,\n      onClickFunc: () => this.handleSave(book),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })) : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"No Results to Display\"))));\n  }\n\n}\n\nexport default Books;","map":{"version":3,"sources":["C:/Users/cpryb/Documents/UW Coding Bootcamp/Course Work/HW17/googleBooks/client/src/pages/BookSearch.js"],"names":["React","Component","Jumbotron","API","DeleteBtn","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","BookCard","Books","state","books","title","loadBooks","getBooks","then","res","setState","data","catch","err","console","log","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","searchBook","items","handleSave","book","volumeInfo","author","authors","description","image","imageLinks","medium","link","canonicalVolumeLink","saveBook","componentDidMount","render","length","map","Id"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport DeleteBtn from \"../components/DeleteBtn\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport { List, ListItem } from \"../components/List\";\r\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\r\nimport BookCard from \"../components/BookCard\";\r\n\r\nclass Books extends Component {\r\n  state = {\r\n    books: [],\r\n    title :  ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadBooks();\r\n  }\r\n\r\n  loadBooks = () => {\r\n    API.getBooks()\r\n      .then(res => this.setState({ books: res.data }))\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  // Handles updating component state when the user types into the input field\r\n  handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  // When the form is submitted, use the API.saveBook method to save the book data\r\n  // Then reload books from the database\r\n  handleFormSubmit = event => {\r\n    event.preventDefault();\r\n    if (this.state.title) {\r\n      API.searchBook(\r\n        this.state.title\r\n      )\r\n        .then((res) => this.setState({ books : res.data.items}))\r\n        .catch(err => console.log(err));\r\n    }\r\n  };\r\n\r\n  handleSave = book => {\r\n    let data = {\r\n      title : book.volumeInfo.title,\r\n      author : book.volumeInfo.authors[0],\r\n      description : book.volumeInfo.description,\r\n      image : book.volumeInfo.imageLinks.medium,\r\n      link : book.volumeInfo.canonicalVolumeLink\r\n    }\r\n    API.saveBook()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container fluid>\r\n        <Row>\r\n          <Col size=\"md-12\">\r\n            <Jumbotron>\r\n              <h1>Google Book Search!</h1>\r\n              <h2>Search by book titles using the search bar below.</h2>\r\n            </Jumbotron>\r\n            <form>\r\n              <Input name=\"title\" placeholder=\"Book Title (ex. The Shining)\" value={this.state.title} onChange={this.handleInputChange}/>\r\n              <FormBtn onClick={this.handleFormSubmit}>Search Book</FormBtn>\r\n            </form>\r\n          </Col>\r\n          <Col size=\"md-12\">\r\n            <Jumbotron>\r\n              <h1>Books Found</h1>\r\n            </Jumbotron>\r\n            {this.state.books.length ? (\r\n                this.state.books.map(book => (\r\n                  <BookCard\r\n                    key={book.Id}\r\n                    title={book.volumeInfo.title}\r\n                    author={book.volumeInfo.authors[0]}\r\n                    synopsis={book.volumeInfo.description}\r\n                    link={book.volumeInfo.canonicalVolumeLink}\r\n                    onClickFunc={() => this.handleSave(book)}\r\n                  >\r\n                  </BookCard>\r\n                )\r\n              )\r\n            ) : (\r\n              <h3>No Results to Display</h3>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Books;\r\n"]},"metadata":{},"sourceType":"module"}